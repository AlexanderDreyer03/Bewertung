import React, { useMemo, useState } from "react";
import { HashRouter, Routes, Route, Link, useNavigate, useLocation } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Phone, CalendarDays, Share2, Copy, Check, ArrowRight, ArrowLeft, Smile, Shield, PiggyBank, Baby, Building2, LineChart } from "lucide-react";

// ------------------------------------------------------------
// Konfiguration – hier anpassen!
// ------------------------------------------------------------
const ADMIN_EMAIL = "info@deine-domain.de"; // <- Deine E-Mail für Fallback (mailto)

// Robuste Basis-URL (funktioniert auch in Previews ohne echten Host)
const BASE_URL =
  typeof window !== "undefined" && window.location
    ? window.location.href.split("#")[0].replace(/\/$/, "")
    : "";

const PARTNER_NUMBERS: {label: string; phone: string; note?: string}[] = [
  { label: "Schlüsseldienst", phone: "+49 30 111111" },
  { label: "Glaserei", phone: "+49 30 222222" },
  { label: "Sanitär / Rohrreinigung", phone: "+49 30 333333" },
  { label: "Elektriker Notdienst", phone: "+49 30 444444" },
  { label: "IT / Handy-Reparatur", phone: "+49 30 555555" },
  { label: "Abschleppdienst", phone: "+49 30 666666" },
  { label: "Schädlingsbekämpfung", phone: "+49 30 777777" },
  { label: "Heizung / Klima", phone: "+49 30 888888" },
  { label: "Apotheken-Notdienst", phone: "+49 800 123456" },
  { label: "Polizei (Notruf)", phone: "110", note: "Nur in Notfällen" },
];

// Gesprächsanlässe für den Funnel
const REASONS: {key: string; label: string; icon: React.ReactNode}[] = [
  { key: "allgemein", label: "Allgemeines Gespräch", icon: <Smile className="h-5 w-5"/> },
  { key: "altersvorsorge", label: "Altersvorsorge", icon: <PiggyBank className="h-5 w-5"/> },
  { key: "baufinanzierung", label: "Baufinanzierung", icon: <Building2 className="h-5 w-5"/> },
  { key: "investment", label: "Investment", icon: <LineChart className="h-5 w-5"/> },
  { key: "absicherung", label: "Absicherung", icon: <Shield className="h-5 w-5"/> },
  { key: "kinder", label: "Kinder Konzept", icon: <Baby className="h-5 w-5"/> },
];

// ------------------------------------------------------------
// Hilfskomponenten
// ------------------------------------------------------------
function DynamicIsland({ message }: { message: string | null }) {
  return (
    <AnimatePresence>
      {message && (
        <motion.div
          initial={{ y: -30, opacity: 0, scale: 0.98 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.98 }}
          transition={{ duration: 0.3 }}
          className="fixed left-1/2 top-3 z-50 -translate-x-1/2"
        >
          <div className="rounded-full px-4 py-2 shadow-xl border bg-background/70 backdrop-blur supports-[backdrop-filter]:bg-background/40">
            <div className="flex items-center gap-2 text-sm">
              <Check className="h-4 w-4"/>
              <span>{message}</span>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

function Shell({ children }: {children: React.ReactNode}) {
  const [toast, setToast] = useState<string | null>(null);
  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/20">
      <DynamicIsland message={toast} />
      <header className="sticky top-0 z-40 border-b backdrop-blur bg-background/70 supports-[backdrop-filter]:bg-background/50">
        <div className="mx-auto max-w-4xl px-4 py-3 flex items-center justify-between">
          <Link to="/" className="font-semibold tracking-tight">Dein Service-Portal</Link>
          <nav className="flex items-center gap-2">
            <Link to="/hotlines"><Button variant="ghost" size="sm"><Phone className="mr-2 h-4 w-4"/>Hotlines</Button></Link>
            <Link to="/termin"><Button variant="ghost" size="sm"><CalendarDays className="mr-2 h-4 w-4"/>Termin</Button></Link>
            <Link to="/empfehlen"><Button variant="ghost" size="sm"><Share2 className="mr-2 h-4 w-4"/>Empfehlen</Button></Link>
          </nav>
        </div>
      </header>
      <main className="mx-auto max-w-4xl px-4 py-8">
        {React.cloneElement(children as any, { setToast })}
      </main>
      <footer className="mx-auto max-w-4xl px-4 pb-10 text-center text-xs text-muted-foreground">
        © {new Date().getFullYear()} – Gemacht mit ❤️ für deine Kunden
      </footer>
    </div>
  );
}

// ------------------------------------------------------------
// Startseite mit Apple-Feel Hero
// ------------------------------------------------------------
function Home({ setToast }: { setToast: (s: string|null)=>void }) {
  return (
    <div className="grid gap-8">
      <motion.div
        initial={{ y: 30, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="relative overflow-hidden rounded-3xl border"
      >
        <div className="absolute inset-0 bg-gradient-to-br from-primary/15 via-transparent to-muted/40"/>
        <div className="p-8 md:p-12 grid md:grid-cols-2 gap-8 items-center">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold tracking-tight">Alles Wichtige auf deinem Schlüsselanhänger</h1>
            <p className="mt-2 text-muted-foreground">QR oder NFC scannen – Hotline wählen, Termin buchen oder mich weiterempfehlen. Schnell, klar, Apple-ähnliche Haptik.</p>
            <div className="mt-6 flex flex-wrap gap-3">
              <Link to="/hotlines"><Button className="rounded-full"><Phone className="mr-2 h-4 w-4"/>Hotlines</Button></Link>
              <Link to="/termin"><Button variant="secondary" className="rounded-full"><CalendarDays className="mr-2 h-4 w-4"/>Termin buchen</Button></Link>
              <Link to="/empfehlen"><Button variant="outline" className="rounded-full"><Share2 className="mr-2 h-4 w-4"/>Empfehlen</Button></Link>
            </div>
          </div>
          <div className="flex justify-center">
            <motion.div
              initial={{ y: 40, opacity: 0, scale: 0.98 }}
              animate={{ y: 0, opacity: 1, scale: 1 }}
              transition={{ duration: 0.7, ease: "easeOut", delay: 0.15 }}
              className="h-44 w-80 rounded-3xl border bg-card shadow-2xl backdrop-blur relative"
            >
              <div className="absolute top-3 left-1/2 -translate-x-1/2 rounded-full px-4 py-1 border shadow bg-background/80 text-xs">Dynamic Island</div>
              <div className="h-full w-full rounded-3xl bg-gradient-to-br from-slate-200/40 to-slate-50/10 dark:from-slate-900/20"/>
            </motion.div>
          </div>
        </div>
      </motion.div>

      <div className="grid md:grid-cols-3 gap-4">
        <FeatureCard icon={<Phone className="h-5 w-5"/>} title="Sofort-Hilfe" text="10 geprüfte Partner – antippen & anrufen." />
        <FeatureCard icon={<CalendarDays className="h-5 w-5"/>} title="Termin in 30s" text="Funnel wählen, Daten senden, ich melde mich." />
        <FeatureCard icon={<Share2 className="h-5 w-5"/>} title="Weiterempfehlen" text="Eigene Empfehlungsseite mit einem Link." />
      </div>
    </div>
  );
}

function FeatureCard({ icon, title, text }:{icon: React.ReactNode; title: string; text: string}){
  return (
    <Card className="rounded-2xl">
      <CardHeader className="flex-row items-center gap-3">
        <div className="rounded-xl border p-2">{icon}</div>
        <CardTitle className="text-base">{title}</CardTitle>
      </CardHeader>
      <CardContent className="text-sm text-muted-foreground">{text}</CardContent>
    </Card>
  )
}

// ------------------------------------------------------------
// Hotlines-Seite
// ------------------------------------------------------------
function Hotlines({ setToast }: { setToast: (s: string|null)=>void }){
  return (
    <div className="grid gap-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold tracking-tight">Sofort-Hilfe Hotlines</h2>
        <Badge variant="secondary">{PARTNER_NUMBERS.length} Partner</Badge>
      </div>
      <div className="grid gap-3">
        {PARTNER_NUMBERS.map((p, i)=> (
          <motion.div key={p.label} initial={{opacity:0, y:8}} animate={{opacity:1,y:0}} transition={{duration:0.25, delay:i*0.03}}>
            <Card className="rounded-2xl">
              <CardContent className="py-3 px-4 flex items-center justify-between">
                <div>
                  <div className="font-medium">{p.label}</div>
                  <div className="text-sm text-muted-foreground">{p.phone} {p.note?`• ${p.note}`:""}</div>
                </div>
                <div className="flex items-center gap-2">
                  <a href={`tel:${p.phone.replace(/\s+/g,'')}`}>
                    <Button className="rounded-full" size="sm"><Phone className="mr-2 h-4 w-4"/>Anrufen</Button>
                  </a>
                  <Button variant="outline" size="sm" className="rounded-full" onClick={()=>{navigator.clipboard.writeText(p.phone); setToast("Nummer kopiert"); setTimeout(()=>setToast(null), 1200)}}>
                    <Copy className="mr-2 h-4 w-4"/>Kopieren
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>
    </div>
  );
}

// ------------------------------------------------------------
// Termin-Funnel (auch als eigenständige Empfehlungsseite genutzt)
// ------------------------------------------------------------
function Funnel({ setToast }: { setToast: (s: string|null)=>void }){
  const nav = useNavigate();
  const { search } = useLocation();
  const params = new URLSearchParams(search);
  const refBy = params.get("ref") || ""; // optionaler Empfehlungsgeber
  const src = params.get("src") || ""; // z.B. "qr"|"nfc"

  const [step, setStep] = useState<1|2|3>(1);
  const [reason, setReason] = useState<string>(REASONS[0]?.key || "allgemein");
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [wish, setWish] = useState(""); // optionaler Terminwunsch
  const [consent, setConsent] = useState(true);
  const [busy, setBusy] = useState(false);
  const [done, setDone] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [honeypot, setHoneypot] = useState("");

  const reasonLabel = useMemo(()=> REASONS.find(r=>r.key===reason)?.label || reason, [reason]);

  async function submit() {
    setError(null);
    if (!consent) { setError("Bitte Einwilligung bestätigen."); return; }
    if (!name.trim() || !/\d/.test(phone)) { setError("Name und Telefonnummer erforderlich."); return; }
    if (honeypot) { setError("Spam erkannt."); return; }

    const payload = {
      reason,
      reasonLabel,
      name: name.trim(),
      phone: phone.trim(),
      wish: wish.trim() || null,
      refBy: refBy || null,
      src: src || null,
      ts: new Date().toISOString(),
      page: typeof window !== "undefined" ? window.location.href : "",
    };

    const API_URL = `${BASE_URL}/api/lead`;

    setBusy(true);
    try {
      const res = await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("Serverantwort nicht ok");
      setDone(true);
      setToast("Anfrage gesendet");
      setTimeout(()=>setToast(null), 1200);
      setStep(3);
    } catch (e) {
      // Fallback: Mailto mit allen Informationen
      const subject = encodeURIComponent(`Neuer Lead: ${reasonLabel}`);
      const body = encodeURIComponent(
        `Name: ${payload.name}\nTelefon: ${payload.phone}\nAnlass: ${payload.reasonLabel}\nWunsch: ${payload.wish || "-"}\nRef: ${payload.refBy || "-"}\nQuelle: ${payload.src || "-"}\nZeit: ${payload.ts}\nSeite: ${payload.page}`
      );
      window.location.href = `mailto:${ADMIN_EMAIL}?subject=${subject}&body=${body}`;
      setDone(true);
      setStep(3);
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="max-w-2xl mx-auto">
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-2xl font-semibold tracking-tight">Termin buchen</h2>
        <div className="text-xs text-muted-foreground">Schritt {step} von 3</div>
      </div>

      {step===1 && (
        <Card className="rounded-2xl">
          <CardHeader>
            <CardTitle className="text-base">Worum geht es?</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {REASONS.map((r)=> (
                <button key={r.key} onClick={()=>{ setReason(r.key); setStep(2); }} className={`group rounded-2xl border p-3 text-left hover:shadow transition ${reason===r.key?"ring-2 ring-primary":""}`}>
                  <div className="flex items-center gap-2">
                    <div className="rounded-lg border p-2">{r.icon}</div>
                    <div className="text-sm font-medium leading-tight">{r.label}</div>
                  </div>
                  <ArrowRight className="mt-2 h-4 w-4 opacity-0 group-hover:opacity-100 transition"/>
                </button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {step===2 && (
        <Card className="rounded-2xl">
          <CardHeader>
            <CardTitle className="text-base">Kontaktdaten</CardTitle>
          </CardHeader>
          <CardContent className="grid gap-4">
            <div className="text-sm text-muted-foreground -mt-2">Anlass: <span className="font-medium">{reasonLabel}</span></div>
            <div className="grid gap-2">
              <Label>Dein Name</Label>
              <Input value={name} onChange={e=>setName(e.target.value)} placeholder="Max Mustermann"/>
            </div>
            <div className="grid gap-2">
              <Label>Telefonnummer</Label>
              <Input value={phone} onChange={e=>setPhone(e.target.value)} placeholder="z. B. +49 170 1234567" inputMode="tel"/>
            </div>
            <div className="grid gap-2">
              <Label>Wunschtermin (optional)</Label>
              <Textarea value={wish} onChange={e=>setWish(e.target.value)} rows={2} placeholder="z. B. Mo–Do ab 16 Uhr, lieber Telefonat"/>
            </div>
            {/* Honeypot */}
            <input className="hidden" tabIndex={-1} autoComplete="off" value={honeypot} onChange={e=>setHoneypot(e.target.value)} placeholder="Bitte leer lassen"/>
            <div className="flex items-center gap-2">
              <Switch checked={consent} onCheckedChange={setConsent} id="consent"/>
              <Label htmlFor="consent" className="text-sm">Ich bin mit einem Rückruf einverstanden.</Label>
            </div>

            {error && <div className="text-sm text-red-500">{error}</div>}

            <div className="flex items-center gap-2">
              <Button className="rounded-full" onClick={submit} disabled={busy}>{busy?"Sende…":"Absenden"}</Button>
              <Button variant="ghost" className="rounded-full" onClick={()=>setStep(1)}><ArrowLeft className="mr-2 h-4 w-4"/>Zurück</Button>
            </div>
          </CardContent>
        </Card>
      )}

      {step===3 && (
        <motion.div initial={{opacity:0, y:10}} animate={{opacity:1, y:0}}>
          <Card className="rounded-2xl">
            <CardHeader>
              <CardTitle>Danke! ✨</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-3 text-sm text-muted-foreground">
              <p>Deine Anfrage ist bei mir eingegangen. Ich melde mich zeitnah zurück.</p>
              <div className="flex items-center gap-2">
                <Link to="/"><Button className="rounded-full">Zur Startseite</Button></Link>
                <Button variant="ghost" className="rounded-full" onClick={()=>{ setStep(1); setDone(false); }}>Weitere Anfrage</Button>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  );
}

// ------------------------------------------------------------
// Empfehlungsseite – zeigt direkt nur den Funnel + Share-Tools
// ------------------------------------------------------------
function ReferPage({ setToast }: { setToast: (s: string|null)=>void }){
  const baseShare = `${BASE_URL}#/empfehlen`;

  async function share() {
    const url = baseShare;
    try {
      if (navigator.share) {
        await navigator.share({ title: "Termin-Funnel", text: "Hier kannst du schnell einen Termin anfragen:", url });
      } else {
        await navigator.clipboard.writeText(url);
        throw new Error("fallback");
      }
      (window as any).setToast?.("Link geteilt");
    } catch {
      await navigator.clipboard.writeText(url);
      (window as any).setToast?.("Link kopiert");
      setTimeout(()=> (window as any).setToast?.(null), 1200);
    }
  }

  (window as any).setToast = setToast;

  return (
    <div className="max-w-2xl mx-auto grid gap-4">
      <Card className="rounded-2xl">
        <CardHeader className="flex-row items-center justify-between">
          <CardTitle className="text-base">Empfehlungslink</CardTitle>
          <div className="flex items-center gap-2">
            <Button className="rounded-full" onClick={share}><Share2 className="mr-2 h-4 w-4"/>Teilen</Button>
            <Button variant="outline" className="rounded-full" onClick={async()=>{ await navigator.clipboard.writeText(baseShare); setToast("Link kopiert"); setTimeout(()=>setToast(null), 1200); }}><Copy className="mr-2 h-4 w-4"/>Kopieren</Button>
          </div>
        </CardHeader>
        <CardContent className="text-sm text-muted-foreground">Sende diesen Link an Freund:innen und Kolleg:innen. Er öffnet den Termin-Funnel direkt.</CardContent>
      </Card>

      <Funnel setToast={setToast} />
    </div>
  );
}

// ------------------------------------------------------------
// App-Router
// ------------------------------------------------------------
export default function Kundenportal() {
  return (
    <HashRouter>
      <Routes>
        <Route path="/" element={<Shell><Home /></Shell>} />
        <Route path="/hotlines" element={<Shell><Hotlines /></Shell>} />
        <Route path="/termin" element={<Shell><Funnel /></Shell>} />
        <Route path="/empfehlen" element={<Shell><ReferPage /></Shell>} />
      </Routes>
    </HashRouter>
  );
}

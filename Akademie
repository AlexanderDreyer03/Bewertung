<!DOCTYPE html>
<html lang="de" data-theme="light">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Akademie â€“ Interner Kurs</title>
  <style>
    /* =========================
       Design-System (ohne externe Libraries)
       ========================= */
    :root {
      --bg: #0b1020;
      --surface: #12172a;
      --card: #171d34;
      --muted: #9aa3b2;
      --text: #eef1f7;
      --primary: #6ea8fe;
      --primary-strong: #3b82f6;
      --accent: #22d3ee;
      --success: #22c55e;
      --warning: #f59e0b;
      --danger: #ef4444;
      --shadow: 0 10px 30px rgba(0,0,0,.4);
      --radius: 14px;
      --radius-sm: 10px;
      --radius-lg: 22px;
    }
    [data-theme="light"]{
      --bg:#f6f7fb; --surface:#ffffff; --card:#ffffff; --muted:#667085; --text:#0b1020;
      --primary:#2563eb; --primary-strong:#1d4ed8; --accent:#0891b2; --shadow:0 8px 24px rgba(2,6,23,.08);
    }
    * { box-sizing: border-box; }
    html, body { height:100%; }
    body {
      margin:0; background: linear-gradient(180deg, var(--bg), var(--surface));
      color: var(--text);
      font: 14.5px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;
    }
    a { color: var(--primary); text-decoration: none; }
    a:hover { text-decoration: underline; }

    /* Layout */
    .app { display:grid; grid-template-rows: auto 1fr; height:100dvh; }
    header {
      position:sticky; top:0; z-index:10; backdrop-filter: saturate(180%) blur(10px);
      background: linear-gradient(90deg, rgba(37,99,235,.08), transparent), var(--surface);
      border-bottom: 1px solid rgba(148,163,184,.18);
    }
    .header-inner { display:flex; gap:16px; align-items:center; padding:14px clamp(12px,3vw,28px); }
    .logo { display:flex; align-items:center; gap:12px; }
    .logo-badge { width:36px; height:36px; border-radius:10px; background: radial-gradient(circle at 30% 30%, var(--accent), var(--primary)); box-shadow: var(--shadow); }
    .title { font-weight:700; letter-spacing:.2px; }
    .grow { flex:1; }

    .progress-wrap { display:flex; align-items:center; gap:10px; min-width:220px; }
    .progress-bar { position:relative; flex:1; height:10px; border-radius:999px; background:rgba(148,163,184,.25); overflow:hidden; }
    .progress-bar > span { position:absolute; inset:0 100% 0 0; background: linear-gradient(90deg, var(--primary), var(--accent)); transition: all .35s ease; }
    .progress-text { font-weight:600; font-variant-numeric: tabular-nums; color:var(--muted) }

    .dark-toggle { border:1px solid rgba(148,163,184,.28); background:var(--card); color:var(--text); padding:8px 12px; border-radius:999px; cursor:pointer; }

    .container { display:grid; grid-template-columns: 320px 1fr; gap:22px; padding:22px clamp(12px,3vw,28px); }

    /* Sidebar */
    .sidebar { background:var(--card); border:1px solid rgba(148,163,184,.18); border-radius: var(--radius); box-shadow: var(--shadow); padding:14px; height: calc(100dvh - 120px); position:sticky; top:86px; overflow:auto; }
    .search { display:flex; gap:8px; margin-bottom:10px; }
    .search input { flex:1; padding:10px 12px; border-radius:10px; border:1px solid rgba(148,163,184,.28); outline:none; background:var(--surface); color:var(--text); }

    .tabs { display:grid; grid-template-columns: repeat(5, 1fr); gap:8px; margin: 10px 0 14px; }
    .tab { padding:8px 10px; border-radius:10px; background:var(--surface); border:1px solid rgba(148,163,184,.18); text-align:center; cursor:pointer; font-weight:600; color:var(--muted); }
    .tab.active { background:linear-gradient(180deg, rgba(37,99,235,.12), transparent); color:var(--text); border-color:rgba(37,99,235,.35) }

    .curriculum { display:flex; flex-direction:column; gap:10px; }
    details.module { border:1px solid rgba(148,163,184,.18); border-radius:12px; overflow:hidden; background:var(--surface); }
    details.module > summary { list-style:none; padding:12px; cursor:pointer; display:flex; align-items:center; gap:10px; font-weight:700; }
    details.module[open] > summary { background:linear-gradient(90deg, rgba(37,99,235,.08), transparent); }
    .module-meta { margin-left:auto; font-weight:600; color:var(--muted); }
    .lesson { display:flex; align-items:center; gap:10px; padding:10px 12px; border-top:1px dashed rgba(148,163,184,.25); }
    .lesson button { margin-left:auto; }
    .lesson-title { font-weight:600; }
    .pill { font-size:12px; padding:4px 8px; border-radius:999px; border:1px solid rgba(148,163,184,.25); color:var(--muted); }
    .done { color: var(--success); }

    /* Main */
    .main { min-width:0; }
    .card { background:var(--card); border:1px solid rgba(148,163,184,.18); border-radius: var(--radius); box-shadow: var(--shadow); }
    .player { aspect-ratio: 16/9; width:100%; background: radial-gradient(1200px 400px at 10% 10%, rgba(37,99,235,.25), transparent), #000; border-radius: var(--radius); overflow:hidden; border:1px solid rgba(148,163,184,.25); }
    .player video { width:100%; height:100%; display:block; background:#000; }

    .content { padding:16px; display:grid; grid-template-columns: 1.3fr .7fr; gap:16px; }
    .section { background:var(--surface); border:1px solid rgba(148,163,184,.18); border-radius:12px; padding:16px; }
    .section h3 { margin:0 0 10px; }
    .btn { background:var(--primary); color:#fff; border:none; border-radius:10px; padding:10px 12px; cursor:pointer; font-weight:700; box-shadow: 0 8px 22px rgba(37,99,235,.25); }
    .btn.secondary { background:transparent; color:var(--text); border:1px solid rgba(148,163,184,.28); box-shadow:none; }
    .btn.ghost { background:transparent; color:var(--muted); border:none; }
    .btn:disabled { opacity:.5; cursor:not-allowed; }

    .flex { display:flex; gap:10px; align-items:center; }
    .stack { display:flex; flex-direction:column; gap:10px; }

    .qna-item { border-top:1px dashed rgba(148,163,184,.25); padding:10px 0; }
    .note { background:rgba(148,163,184,.1); padding:10px; border-radius:10px; }

    .materials a { display:flex; align-items:center; justify-content:space-between; padding:10px 12px; border:1px dashed rgba(148,163,184,.25); border-radius:10px; }

    .footer { padding:12px 16px; color:var(--muted); font-size:12px; text-align:center; }

    /* Dialog */
    dialog { border:none; border-radius: 16px; padding:0; width:min(720px, 96vw); box-shadow: var(--shadow); }
    .dialog-head { padding:14px 16px; border-bottom:1px solid rgba(148,163,184,.18); display:flex; align-items:center; justify-content:space-between; background:var(--card); }
    .dialog-body { padding:16px; background:var(--surface); max-height:70vh; overflow:auto; }

    /* Responsive */
    @media (max-width: 1024px){
      .container { grid-template-columns: 1fr; }
      .sidebar { position:static; height:auto; }
      .content { grid-template-columns: 1fr; }
    }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div class="header-inner">
        <div class="logo">
          <div class="logo-badge" aria-hidden="true"></div>
          <div>
            <div class="title">Akademie â€“ Interner Kurs</div>
            <small style="color:var(--muted)">EigenstÃ¤ndiges Schulungs-Template (ohne Marken/Logos Dritter)</small>
          </div>
        </div>
        <div class="grow"></div>
        <div class="progress-wrap" title="Fortschritt dieses Kurses">
          <div class="progress-bar" aria-label="Kursfortschritt" role="progressbar" aria-valuemin="0" aria-valuemax="100"><span id="progressFill"></span></div>
          <div class="progress-text" id="progressText">0%</div>
        </div>
        <button id="toggleTheme" class="dark-toggle" aria-label="Theme umschalten">ðŸŒ—</button>
      </div>
    </header>

    <div class="container">
      <!-- Sidebar / Curriculum -->
      <aside class="sidebar" aria-label="Kursnavigation">
        <div class="search">
          <input id="search" type="search" placeholder="Suchen (Lektion/Modul)â€¦" />
        </div>

        <div class="tabs" role="tablist">
          <div class="tab active" data-tab="curriculum" role="tab" aria-selected="true">Curriculum</div>
          <div class="tab" data-tab="material" role="tab" aria-selected="false">Material</div>
          <div class="tab" data-tab="qna" role="tab" aria-selected="false">Q&A</div>
          <div class="tab" data-tab="notizen" role="tab" aria-selected="false">Notizen</div>
          <div class="tab" data-tab="einstellungen" role="tab" aria-selected="false">Einstellungen</div>
        </div>

        <div id="panel-curriculum" class="panel">
          <div class="curriculum" id="curriculum"></div>
        </div>

        <div id="panel-material" class="panel" hidden>
          <div class="stack materials" id="materials"></div>
        </div>

        <div id="panel-qna" class="panel" hidden>
          <div class="stack" id="qnaList"></div>
          <div class="stack" style="margin-top:10px;">
            <textarea id="qnaInput" rows="3" placeholder="Frage stellenâ€¦" style="width:100%; padding:10px; border-radius:10px; border:1px solid rgba(148,163,184,.28); background:var(--surface); color:var(--text);"></textarea>
            <button class="btn" id="qnaSubmit">Frage posten</button>
          </div>
        </div>

        <div id="panel-notizen" class="panel" hidden>
          <div class="stack">
            <textarea id="noteInput" rows="6" placeholder="Eigene Notizenâ€¦" style="width:100%; padding:10px; border-radius:10px; border:1px solid rgba(148,163,184,.28); background:var(--surface); color:var(--text);"></textarea>
            <div class="flex">
              <button class="btn" id="saveNote">Notizen speichern</button>
              <button class="btn secondary" id="clearNote">Leeren</button>
            </div>
            <div class="note" id="notePreview" aria-live="polite"></div>
          </div>
        </div>

        <div id="panel-einstellungen" class="panel" hidden>
          <div class="stack">
            <div class="section">
              <h3>Export/Import</h3>
              <div class="flex">
                <button class="btn secondary" id="exportBtn">Daten exportieren</button>
                <input type="file" id="importFile" accept="application/json" />
              </div>
              <small class="muted">Exportiert: Fortschritt, Quiz-Ergebnisse, Q&A, Notizen (lokal).</small>
            </div>
            <div class="section">
              <h3>Zertifikat</h3>
              <div class="stack">
                <input id="certName" type="text" placeholder="Dein Name fÃ¼r das Zertifikat" style="padding:10px;border-radius:10px;border:1px solid rgba(148,163,184,.28);background:var(--surface);color:var(--text);" />
                <button class="btn" id="certBtn" disabled>Zertifikat erzeugen</button>
                <small class="muted">Wird freigeschaltet, sobald alle Lektionen abgeschlossen sind.</small>
              </div>
            </div>
          </div>
        </div>
      </aside>

      <!-- Main -->
      <main class="main">
        <div class="card">
          <div class="player"><video id="video" controls preload="metadata" src="" poster=""></video></div>
          <div class="content">
            <div class="section stack">
              <div class="flex" style="justify-content:space-between; align-items:flex-start;">
                <div>
                  <h2 id="lessonTitle" style="margin:0 0 6px">WÃ¤hle eine Lektion</h2>
                  <div id="lessonMeta" style="color:var(--muted)">Dauer â€¢ Modul â€¢ Status</div>
                </div>
                <div class="flex">
                  <button class="btn secondary" id="prevBtn" disabled>â—€ï¸Ž ZurÃ¼ck</button>
                  <button class="btn" id="completeBtn" disabled>âœ“ Als erledigt markieren</button>
                  <button class="btn secondary" id="nextBtn" disabled>Weiter â–¶ï¸Ž</button>
                </div>
              </div>

              <p id="lessonDesc" style="margin:6px 0 0; color:var(--muted)">Beschreibung der Lektion erscheint hier.</p>

              <div class="flex">
                <button class="btn" id="openQuiz" disabled>Quiz zur Lektion</button>
                <button class="btn secondary" id="addMaterial" disabled>Material hinzufÃ¼gen</button>
              </div>
            </div>

            <div class="section stack">
              <h3>Merkpunkte</h3>
              <ul id="keypoints" style="margin:0; padding-left:18px;">
                <li>WÃ¤hle im Curriculum links eine Lektion.</li>
                <li>Markiere sie nach dem Ansehen als erledigt.</li>
                <li>Bestehe das Quiz, um Fortschritt zu erhalten.</li>
              </ul>
            </div>
          </div>
          <div class="footer">Interne Schulungsseite â€“ generisches Template (keine Inhalte/Marken Dritter)</div>
        </div>
      </main>
    </div>
  </div>

  <!-- Quiz Dialog -->
  <dialog id="quizDialog">
    <div class="dialog-head">
      <strong>Quiz</strong>
      <button class="btn secondary" onclick="document.getElementById('quizDialog').close()">SchlieÃŸen</button>
    </div>
    <div class="dialog-body">
      <div id="quizContainer" class="stack"></div>
      <div class="flex" style="justify-content:space-between; margin-top:12px;">
        <div id="quizStatus" style="color:var(--muted)"></div>
        <button class="btn" id="submitQuiz">Quiz abgeben</button>
      </div>
    </div>
  </dialog>

  <canvas id="certCanvas" width="1400" height="990" style="display:none"></canvas>

  <script>
    // =========================
    // Kurs-Daten (Demo) â€“ Inhalte bitte eigenstÃ¤ndig ersetzen/einfÃ¼gen
    // =========================
    const course = {
      id: 'akademie-intern-v1',
      title: 'Akademie â€“ Interner Kurs',
      modules: [
        {
          id: 'm1', title: 'Willkommen im System', meta: 'Monat 1',
          lessons: [
            { id:'m1l1', title:'Willkommen & Ãœberblick', duration:'6:00', video:'',
              description:'Einstieg, Ziele der Akademie, Fahrplan.',
              keypoints:['Was erwartet dich?','Wie funktioniert der Kurs?','NÃ¤chste Schritte'],
              quiz:[{
                q:'Worum geht es primÃ¤r in dieser Akademie?',
                a:['Produkte auswendig lernen','Ganzheitliche Beratung & Praxis','Nur Abschluss-Training'],
                c:1
              }]
            },
            { id:'m1l2', title:'Allfinanz-Grundgedanke', duration:'5:30', video:'',
              description:'Ganzheitliche Beratung â€“ Absicherung, Vorsorge, Investment, Finanzierung.',
              keypoints:['4 Produktwelten','Bedarfsorientierung','Langfristige Begleitung'],
              quiz:[{
                q:'Welche Bereiche gehÃ¶ren zur Allfinanz?',
                a:['Nur Versicherungen','Vers., Vorsorge, Investment, Finanzierung','Nur Investments'],
                c:1
              }]
            }
          ]
        },
        {
          id:'m2', title:'Bedarfsanalyse & GesprÃ¤chsfÃ¼hrung', meta:'Monat 1â€“2',
          lessons:[
            { id:'m2l1', title:'Bedarfsanalyse â€“ Der rote Faden', duration:'6:30', video:'',
              description:'IST-Aufnahme, Bedarf aufdecken, LÃ¶sung entwickeln.',
              keypoints:['Fragen statt reden','Aktiv zuhÃ¶ren','Analyse â‰  Produkt'],
              quiz:[{q:'Welche Reihenfolge ist korrekt?', a:['Produkt â†’ Bedarf â†’ IST','IST â†’ Bedarf â†’ LÃ¶sung','LÃ¶sung â†’ IST â†’ Bedarf'], c:1}]
            },
            { id:'m2l2', title:'GesprÃ¤chsfÃ¼hrung Basics', duration:'6:00', video:'',
              description:'5 Schritte im KundengesprÃ¤ch â€“ Struktur schafft Sicherheit.',
              keypoints:['BegrÃ¼ÃŸung','Rahmen setzen','Analyse','Empfehlung','NÃ¤chste Schritte'],
              quiz:[{q:'Was ist der wichtigste Skill?', a:['Viel reden','ZuhÃ¶ren & Fragen','Fachbegriffe nutzen'], c:1}]
            }
          ]
        },
        {
          id:'m3', title:'Produktwissen Basics', meta:'Monat 3 â€“ Pilot',
          lessons:[
            { id:'m3l1', title:'Ãœberblick Produktwelten', duration:'6:00', video:'',
              description:'Absicherung, Vorsorge, Investment, Finanzierung â€“ Nutzen argumentieren.',
              keypoints:['Nutzen vor Eigenschaften','Einfach erklÃ¤ren','60s-Pitches'],
              quiz:[{q:'Wie erklÃ¤rst du Produkte ideal?', a:['Eigenschaften','Nutzen','Kleingedrucktes'], c:1}]
            }
          ]
        },
        {
          id:'m4', title:'Einwandbehandlung & Abschluss', meta:'Monat 4â€“6 â€“ Rollout',
          lessons:[
            { id:'m4l1', title:'4-Schritt-Einwandtechnik', duration:'7:00', video:'',
              description:'ZuhÃ¶ren, VerstÃ¤ndnis, Umformulieren, Nutzenantwort.',
              keypoints:['Einwand = Interesse','Struktur nutzen','SouverÃ¤n bleiben'],
              quiz:[{q:'Was kommt zuerst?', a:['Antwort geben','ZuhÃ¶ren','Preis senken'], c:1}]
            },
            { id:'m4l2', title:'Abschluss-Signale setzen', duration:'5:30', video:'',
              description:'Konkrete Next Steps: Termin, Antrag, Feedback.',
              keypoints:['Klar fÃ¼hren','Optionen bieten','Verbindlichkeit'],
              quiz:[{q:'Was ist am GesprÃ¤chsende wichtig?', a:['Offen lassen','NÃ¤chsten Schritt klÃ¤ren','Neues Thema starten'], c:1}]
            }
          ]
        }
      ],
      materials: [
        { id:'h1', name:'Leitfaden ErstgesprÃ¤ch (PDF)', href:'#' },
        { id:'h2', name:'Checkliste Bedarfsanalyse (PDF)', href:'#' },
        { id:'h3', name:'Top 20 EinwÃ¤nde & Antworten (PDF)', href:'#' }
      ]
    };

    // ================ State & Storage ================
    const SKEY = `course:${course.id}`;
    const state = JSON.parse(localStorage.getItem(SKEY) || '{}');
    state.completed = new Set(state.completed || []);
    state.quiz = state.quiz || {}; // { lessonId: {score, total} }
    state.qna = state.qna || []; // [{text, ts}]
    state.note = state.note || '';
    state.active = state.active || { moduleId: course.modules[0].id, lessonId: course.modules[0].lessons[0].id };

    function persist(){
      localStorage.setItem(SKEY, JSON.stringify({
        completed:[...state.completed], quiz: state.quiz, qna: state.qna, note: state.note, active: state.active
      }));
    }

    // ================ Helpers ================
    function $(sel, root=document){ return root.querySelector(sel); }
    function $all(sel, root=document){ return [...root.querySelectorAll(sel)]; }

    function findLesson(moduleId, lessonId){
      const mod = course.modules.find(m=>m.id===moduleId);
      const lesson = mod?.lessons.find(l=>l.id===lessonId);
      return {mod, lesson};
    }

    function totalLessons(){ return course.modules.reduce((n,m)=>n+m.lessons.length,0); }

    function progressPercent(){ return Math.round((state.completed.size / totalLessons()) * 100) || 0; }

    function updateProgress(){
      const pct = progressPercent();
      $('#progressFill').style.inset = `0 ${100-pct}% 0 0`;
      $('#progressText').textContent = pct + '%';
      // Zertifikat freigeben
      $('#certBtn').disabled = pct < 100;
    }

    // ================ UI Renderers ================
    function renderCurriculum(filter=''){
      const wrap = $('#curriculum');
      wrap.innerHTML = '';
      const f = filter.trim().toLowerCase();
      course.modules.forEach((m,i)=>{
        const det = document.createElement('details');
        det.className = 'module';
        det.open = i < 2; // erste Module offen
        const sum = document.createElement('summary');
        sum.innerHTML = `<span>${m.title}</span> <span class="pill">${m.meta||''}</span> <span class="module-meta">${m.lessons.length} Lektionen</span>`;
        det.appendChild(sum);

        m.lessons.forEach((l,idx)=>{
          if(f && !(`${m.title} ${l.title}`.toLowerCase().includes(f))) return;
          const row = document.createElement('div');
          row.className = 'lesson';
          const done = state.completed.has(l.id);
          row.innerHTML = `
            <div class="lesson-title">${l.title}</div>
            <span class="pill">${l.duration}</span>
            <span class="pill ${done?'done':''}">${done?'âœ” Erledigt':'Offen'}</span>
            <button class="btn secondary" data-goto="${m.id}|${l.id}">Ã–ffnen</button>
          `;
          det.appendChild(row);
        });

        wrap.appendChild(det);
      });

      $all('button[data-goto]').forEach(btn=>btn.addEventListener('click', e=>{
        const [m,l] = btn.getAttribute('data-goto').split('|');
        loadLesson(m,l);
      }));
    }

    function renderMaterials(){
      const list = $('#materials');
      list.innerHTML = '';
      course.materials.forEach(m=>{
        const a = document.createElement('a');
        a.href = m.href || '#';
        a.innerHTML = `<span>${m.name}</span><span>â¬‡</span>`;
        list.appendChild(a);
      });
    }

    function renderQnA(){
      const list = $('#qnaList'); list.innerHTML = '';
      if(!state.qna.length){ list.innerHTML = '<div class="muted">Noch keine Fragen. Stelle die erste!</div>'; return; }
      state.qna.slice().reverse().forEach(item=>{
        const div = document.createElement('div');
        div.className = 'qna-item';
        const ts = new Date(item.ts).toLocaleString();
        div.innerHTML = `<div style="color:var(--muted); font-size:12px;">${ts}</div><div>${item.text}</div>`;
        list.appendChild(div);
      });
    }

    function renderNote(){
      $('#noteInput').value = state.note || '';
      $('#notePreview').textContent = state.note ? state.note : 'Noch keine Notizen gespeichert.';
    }

    function setActiveTab(tab){
      $all('.tab').forEach(t=>{ const on = t.dataset.tab===tab; t.classList.toggle('active', on); t.setAttribute('aria-selected', on); });
      $all('.panel').forEach(p=> p.hidden = true);
      $(`#panel-${tab}`).hidden = false;
    }

    // ================ Lesson Loading ================
    function loadLesson(moduleId, lessonId){
      const {mod, lesson} = findLesson(moduleId, lessonId);
      if(!lesson) return;
      state.active = { moduleId, lessonId };
      persist();

      // player
      const video = $('#video');
      video.src = lesson.video || '';
      video.poster = lesson.poster || '';

      // meta
      $('#lessonTitle').textContent = lesson.title;
      $('#lessonMeta').textContent = `${lesson.duration} â€¢ ${mod.title} ${mod.meta?('â€“ '+mod.meta):''} â€¢ ${state.completed.has(lesson.id)?'Erledigt':'Offen'}`;
      $('#lessonDesc').textContent = lesson.description || '';

      // actions
      $('#completeBtn').disabled = false;
      $('#openQuiz').disabled = !(lesson.quiz && lesson.quiz.length);
      $('#addMaterial').disabled = false;

      // keypoints
      const ul = $('#keypoints'); ul.innerHTML = '';
      (lesson.keypoints||[]).forEach(k=>{ const li = document.createElement('li'); li.textContent = k; ul.appendChild(li); });

      // prev/next
      const flat = course.modules.flatMap(m=>m.lessons.map(l=>({m:m.id,l:l.id})));
      const idx = flat.findIndex(x=>x.m===moduleId && x.l===lessonId);
      $('#prevBtn').disabled = idx<=0;
      $('#nextBtn').disabled = idx>=flat.length-1;
      $('#prevBtn').onclick = ()=>{ const p=flat[idx-1]; loadLesson(p.m,p.l); };
      $('#nextBtn').onclick = ()=>{ const n=flat[idx+1]; loadLesson(n.m,n.l); };

      // focus main
      setActiveTab('curriculum');
      updateProgress();
      renderCurriculum($('#search').value);
    }

    // ================ Complete & Progress ================
    $('#completeBtn').addEventListener('click', ()=>{
      const {lesson} = findLesson(state.active.moduleId, state.active.lessonId);
      if(!lesson) return;
      // Require quiz pass if exists
      const hasQuiz = lesson.quiz && lesson.quiz.length;
      const passed = !hasQuiz || (state.quiz[lesson.id] && state.quiz[lesson.id].score===state.quiz[lesson.id].total);
      if(hasQuiz && !passed){
        alert('Bitte zuerst das Quiz bestehen (100%), dann als erledigt markieren.');
        return;
      }
      state.completed.add(lesson.id);
      persist();
      updateProgress();
      renderCurriculum($('#search').value);
      loadLesson(state.active.moduleId, state.active.lessonId);
    });

    // ================ Search ================
    $('#search').addEventListener('input', e=>{
      renderCurriculum(e.target.value);
    });

    // ================ Tabs ================
    $all('.tab').forEach(t=> t.addEventListener('click', ()=> setActiveTab(t.dataset.tab)) );

    // ================ Q&A ================
    $('#qnaSubmit').addEventListener('click', ()=>{
      const val = $('#qnaInput').value.trim();
      if(!val) return;
      state.qna.push({ text: val, ts: Date.now() });
      $('#qnaInput').value='';
      persist(); renderQnA();
    });

    // ================ Notes ================
    $('#saveNote').addEventListener('click', ()=>{ state.note = $('#noteInput').value; persist(); renderNote(); });
    $('#clearNote').addEventListener('click', ()=>{ $('#noteInput').value=''; state.note=''; persist(); renderNote(); });

    // ================ Export / Import ================
    $('#exportBtn').addEventListener('click', ()=>{
      const data = localStorage.getItem(SKEY);
      const blob = new Blob([data], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = `${course.id}-backup.json`; a.click();
      URL.revokeObjectURL(url);
    });
    $('#importFile').addEventListener('change', async (e)=>{
      const file = e.target.files[0]; if(!file) return;
      const text = await file.text();
      try{ const obj = JSON.parse(text); localStorage.setItem(SKEY, text); location.reload(); }
      catch{ alert('UngÃ¼ltige Datei.'); }
    });

    // ================ Quiz Engine ================
    $('#openQuiz').addEventListener('click', ()=>{
      const {lesson} = findLesson(state.active.moduleId, state.active.lessonId);
      if(!lesson?.quiz?.length) return;
      const box = $('#quizContainer'); box.innerHTML='';
      lesson.quiz.forEach((item, qi)=>{
        const card = document.createElement('div'); card.className='section';
        const options = item.a.map((opt,oi)=>{
          const id = `q${qi}_o${oi}`;
          return `<div class="flex"><input type="radio" id="${id}" name="q${qi}" value="${oi}"><label for="${id}">${opt}</label></div>`
        }).join('');
        card.innerHTML = `<strong>${qi+1}. ${item.q}</strong><div class="stack" style="margin-top:8px;">${options}</div>`;
        box.appendChild(card);
      });
      $('#quizStatus').textContent='';
      $('#quizDialog').showModal();
    });

    $('#submitQuiz').addEventListener('click', ()=>{
      const {lesson} = findLesson(state.active.moduleId, state.active.lessonId);
      if(!lesson?.quiz?.length) return;
      let score = 0;
      lesson.quiz.forEach((item, qi)=>{
        const chosen = document.querySelector(`input[name="q${qi}"]:checked`);
        if(chosen && Number(chosen.value)===item.c) score++;
      });
      const total = lesson.quiz.length;
      state.quiz[lesson.id] = {score, total};
      persist();
      const ok = score===total;
      $('#quizStatus').textContent = `Ergebnis: ${score}/${total} ${ok?'âœ“ bestanden':'â€“ erneut versuchen'}`;
      if(ok) { alert('Quiz bestanden! Du kannst die Lektion jetzt als erledigt markieren.'); }
    });

    // ================ Materials â€“ add from current lesson (demo placeholder) ================
    $('#addMaterial').addEventListener('click', ()=>{
      const {lesson} = findLesson(state.active.moduleId, state.active.lessonId);
      const name = prompt('Materialtitel (z. B. Handout, Folien):');
      if(!name) return;
      course.materials.push({ id: Math.random().toString(36).slice(2), name, href:'#'});
      renderMaterials();
      alert('Material hinzugefÃ¼gt (Demo-Link).');
    });

    // ================ Certificate ================
    function drawCertificate(name){
      const c = document.getElementById('certCanvas');
      const ctx = c.getContext('2d');
      // Hintergrund
      const grad = ctx.createLinearGradient(0,0,c.width,c.height);
      grad.addColorStop(0,'#0ea5e9'); grad.addColorStop(1,'#2563eb');
      ctx.fillStyle = grad; ctx.fillRect(0,0,c.width,c.height);
      // Karte
      const pad = 80; const w=c.width-pad*2; const h=c.height-pad*2;
      ctx.fillStyle = 'rgba(255,255,255,0.95)';
      roundRect(ctx, pad, pad, w, h, 28, true, false);
      // Titel
      ctx.fillStyle = '#0b1020';
      ctx.font = 'bold 64px system-ui';
      ctx.fillText('ZERTIFIKAT', pad+60, pad+120);
      // Name
      ctx.font = '28px system-ui';
      ctx.fillStyle = '#334155';
      ctx.fillText('Hiermit wird bestÃ¤tigt, dass', pad+60, pad+200);
      ctx.font = 'bold 48px system-ui';
      ctx.fillStyle = '#0b1020';
      ctx.fillText(name || 'Vorname Nachname', pad+60, pad+270);
      // Kursname & Datum
      ctx.font = '24px system-ui'; ctx.fillStyle = '#334155';
      const date = new Date().toLocaleDateString();
      ctx.fillText('den internen Kurs erfolgreich abgeschlossen hat.', pad+60, pad+320);
      ctx.fillText(`Datum: ${date}`, pad+60, pad+360);
      ctx.fillText('Kurs: Akademie â€“ Interner Kurs', pad+60, pad+395);
      // Footer
      ctx.strokeStyle = '#cbd5e1'; ctx.lineWidth = 2;
      ctx.beginPath(); ctx.moveTo(pad+60, c.height-pad-120); ctx.lineTo(c.width-pad-60, c.height-pad-120); ctx.stroke();
      ctx.font = '20px system-ui'; ctx.fillStyle = '#334155';
      ctx.fillText('Unterschrift (Mentor/Inhaber)', pad+60, c.height-pad-70);
    }
    function roundRect(ctx, x, y, w, h, r, fill, stroke){
      if (typeof r === 'number') r = {tl:r,tr:r,br:r,bl:r};
      ctx.beginPath();
      ctx.moveTo(x+r.tl, y);
      ctx.lineTo(x+w-r.tr, y);
      ctx.quadraticCurveTo(x+w, y, x+w, y+r.tr);
      ctx.lineTo(x+w, y+h-r.br);
      ctx.quadraticCurveTo(x+w, y+h, x+w-r.br, y+h);
      ctx.lineTo(x+r.bl, y+h);
      ctx.quadraticCurveTo(x, y+h, x, y+h-r.bl);
      ctx.lineTo(x, y+r.tl);
      ctx.quadraticCurveTo(x, y, x+r.tl, y);
      ctx.closePath();
      if (fill) ctx.fill(); if (stroke) ctx.stroke();
    }

    $('#certBtn').addEventListener('click', ()=>{
      const name = ($('#certName').value || '').trim();
      drawCertificate(name);
      const c = document.getElementById('certCanvas');
      const link = document.createElement('a');
      link.download = 'zertifikat.png';
      link.href = c.toDataURL('image/png');
      link.click();
    });

    // ================ Theme Toggle ================
    $('#toggleTheme').addEventListener('click', ()=>{
      const isLight = document.documentElement.getAttribute('data-theme')==='light';
      document.documentElement.setAttribute('data-theme', isLight?'dark':'light');
    });

    // ================ Init ================
    function init(){
      renderCurriculum('');
      renderMaterials();
      renderQnA();
      renderNote();
      updateProgress();
      // restore active lesson
      const {moduleId, lessonId} = state.active || {};
      if(moduleId && lessonId){ loadLesson(moduleId, lessonId); }
      // Tabs default
      setActiveTab('curriculum');
      // Enable certificate if completed
      $('#certBtn').disabled = progressPercent() < 100;
    }
    init();
  </script>
</body>
</html>
